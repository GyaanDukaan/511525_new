#include <iostream>
#include <concepts>
#include <type_traits>
#include <stdexcept>
#include <chrono>

#include <vector>

// Legacy SFINAE using template specialization
template <typename T>
struct is_integral_type {
    static const bool value = false;
};

template <>
struct is_integral_type<int> {
    static const bool value = true;
};

template <>
struct is_integral_type<long> {
    static const bool value = true;
};

// Function enabled only for integral types (original SFINAE)
template <typename T>
typename std::enable_if<is_integral_type<T>::value, void>::type
sfinae_printType(T value) {
    (void)value;
}

// Function enabled only for non-integral types (original SFINAE)
template <typename T>
typename std::enable_if<!is_integral_type<T>::value, void>::type
sfinae_printType(T value) {
    (void)value;
}

// Function template for integral types using concepts
template <std::integral T>
void concept_printType(T value) {
    (void)value;
}

// Function template for non-integral types using concepts
template <typename T>
requires (!std::integral<T>)
void concept_printType(T value) {
    (void)value;
}

template <typename Func, typename T, size_t N>
void measure_performance(std::string funName, Func func, std::vector<T> values) {
    std::chrono::time_point<std::chrono::high_resolution_clock> t1;
    std::chrono::time_point<std::chrono::high_resolution_clock> t2;
    auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(t2 - t1);

    t1 = std::chrono::high_resolution_clock::now();
    for (int i = 0; i < N; ++i) {
        for (const auto& value : values) {
            func(value);
        }
    }
    t2 = std::chrono::high_resolution_clock::now();

    std::cout << funName << ": " << duration.count() << " ms\n";
}

int main() {
    size_t numIterations = 1'000'000;

    std::vector<int> integralValues{42, 2023, 1337, -100, 0};
    std::vector<double> floatingPointValues{3.14, 2.72, -42.0, 13.37};
    std::vector<const char*> stringValues{"Hello", "C++23", " concepts!"};

    measure_performance("SFINAE (integral)", [](int value) { sfinae_printType(value); }, integralValues);
    measure_performance("SFINAE (non-integral)", [](double value) { sfinae_printType(value); }, floatingPointValues);
    measure_performance("SFINAE (string)", [](const char* value) { sfinae_printType(value); }, stringValues);
    
    measure_performance("Concepts (integral)", [](int value) { concept_printType(value); }, integralValues);
    measure_performance("Concepts (non-integral)", [](double value) { concept_printType(value); }, floatingPointValues);
    measure_performance("Concepts (string)", [](const char* value) { concept_printType(value); }, stringValues);

    return 0;
}
