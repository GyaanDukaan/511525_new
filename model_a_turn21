#include <iostream>
#include <type_traits>
#include <chrono>

template <typename T>
struct is_integral_type {
    static const bool value = false;
};

template <>
struct is_integral_type<int> {
    static const bool value = true;
};

template <>
struct is_integral_type<long> {
    static const bool value = true;
};

template <typename T>
typename std::enable_if<is_integral_type<T>::value, void>::type
printType(T value) {
    std::cout << "Integral type: " << value << std::endl;
}

template <typename T>
typename std::enable_if<!is_integral_type<T>::value, void>::type
printType(T value) {
    std::cout << "Non-integral type: " << value << std::endl;
}

int main() {
    const int iterations = 1000000;
    auto start = std::chrono::high_resolution_clock::now();

    for (int i = 0; i < iterations; ++i) {
        printType(i);    // Integral type
    }

    auto end = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double, std::milli> duration = end - start;
    std::cout << "Legacy SFINAE duration: " << duration.count() << " ms" << std::endl;

    return 0;
}
